name: Build & Test & Release
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.19"]
    steps:
      - uses: actions/checkout@v2
      - name: Use Golang v${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: |
          git fetch --force --tags
          make build-all
      - name: Upload dist files
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.19"]
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Use Golang v${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Use cached Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests
        run: |
          make test
          make coverage

  release-create:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build, test]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          release_name: v${{ github.ref }}
          tag_name: ${{ github.ref }}

  release-upload:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [release-create]
    strategy:
      matrix:
        target:
          - darwin-amd64
          - darwin-arm64
          - freebsd-386
          - freebsd-amd64
          - linux-386
          - linux-amd64
          - linux-arm64
          - linux-armv7
          - windows-386.exe
          - windows-amd64.exe
    steps:
      - name: Download build files
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Upload Release Assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/octet-stream
          asset_name: nas-cli-${{ matrix.target }}
          asset_path: build/nas-cli-${{ matrix.target }}
          upload_url: ${{ needs.release-create.outputs.upload_url }}
      - name: Upload Release Shasums
        id: upload-release-shasum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: text/plain
          asset_name: nas-cli-${{ matrix.target }}.sha256
          asset_path: build/nas-cli-${{ matrix.target }}.sha256
          upload_url: ${{ needs.release-create.outputs.upload_url }}

  release-homebrew:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [release-upload]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: jeremiergz/homebrew-nas-cli
          token: ${{ secrets.PA_TOKEN }}
      - name: Download build files
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Update formula
        run: |
          export SHA256_AMD64="$(awk -F '  +' '{print $1}' build/nas-cli-darwin-amd64.sha256)"
          export SHA256_ARM64="$(awk -F '  +' '{print $1}' build/nas-cli-darwin-arm64.sha256)"
          sed -i "11s/sha256 \".*\"/sha256 \"${SHA256_AMD64}\"/" ./Formula/nas-cli.rb
          sed -i "15s/sha256 \".*\"/sha256 \"${SHA256_ARM64}\"/" ./Formula/nas-cli.rb
          sed -i "s/version \".*\"/version \"${GITHUB_REF_NAME}\"/" ./Formula/nas-cli.rb
          git add ./Formula
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "chore: update to v${GITHUB_REF_NAME}"
          git push
